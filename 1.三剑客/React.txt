React.createElement()
ReactDom.render()
组件：
1.Fn Cpt(props){ return }
2.class cpt extends React.Component{
constructor{
super()
this.state
}
render(){
jsx/this.props
}
}
组件通信：
props/fn

样式：
1.行内样式→style={obj}
2.style-loader css-loader -D
test_/\.css$/
use_["style-loader","css-loader?modules"]
模块化只对类名和ID选择器生效
use_["style-loader","css-loader?modules&localIdentName=[path][name]-[local]-[hash:5]"]
localIdentName自定义类名
是否模块化：
 :global(cls)/:local(cls)

SCSS/LESS模块化：
安装配置sass-loader node-sass -D

事件：
驼峰onClick={fc}
this.setState({},callback)
文本框单向→onChange（e.target.value/this.refs.xxx.value）

生命周期：
创建阶段↓
componentWillMount
render
componentDidMount
运行阶段↓
componentWillReceiveProps
shouldComponentUpdate
componentWillUpate
render
componentDidUpdate
销毁阶段↓
componentWillUnmount
————————————
1.初始化
2.页面组件化
3.页面逻辑化
————————————
虚拟DOM→JS对象模拟DOM元素和嵌套→高效更新
Diff算法→逐层对比（tree→component→element）→按需更新

webpack初始化：
1.npm init -y
dist→src/index.html/main.js
2.webpack webpack-cli -D
dev/webpack
3.webpack.config.js
mode/index.js→main.js
4.webpack-dev-server -D
dev/webpack-dev-server
5.html-webpack-plugin -D
new{
template: path.join(__dirname,"./src/index.html")
name:"index.html"
}

react初始化：
1.react react-dom -s
2.React.createElement('',obj,children...)
ReactDOM.render(RDom,el)

JSX语法：
{} {/**/} className htmlFor
1.安装babel插件
babel-core babel-loader babel-plugin-transform-runtime -D
babel-preset-env babel-preset-stage-0 -D
2.安装识别jsx包
babel-preset-react -D
3.添加.babelrc配置文件
{
"presets":["env","stage-0","react"],
"plugins":["transform-runtime"]
}
4.配置webpack.config.js
module:{
rules:[
{test:/\.js|jsx$/,use:"babel-loader",exclude:/node_modules/}
]
}
5.后缀/根目录别名
resolve:{
extensions:[".js","jsx",".json"]
alias:{
"@":path.join(__dirname,"./src")
}
}